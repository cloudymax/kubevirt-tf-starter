##########################
# Virtual Machine settings
virtualMachine:  
  name: debian12
  namespace: default
  runStrategy: "RerunOnFailure"
  
  features:
    kvmEnabled: true
    acpiEnabled: true
    smmEnabled: true
    efiEnabled: true
    autoattachPodInterface: true
    autoattachSerialConsole: true
    autoattachGraphicsDevice: true
  
  machine:
    machineType: "q35"
    cpuPassthrough: true
    vCores: 2
    pinCores: false
    hyperThreadingEnabled: true
    memory: 4Gi
  gpus: []
  #  - name: gpu0
  #    device: nvidia.com/TU104GL_Tesla_T4

virtualMachinePool:
  enabled: false
  size: 1

disks:
#############################
# Cloud-init no-cloud example
# hold your user-data file
# Must be the first boot device
- name: cloudinitvolume
  type: cdrom
  bus: sata
  readonly: true
  bootorder: 1
  pv-enable: false

#################################################
# DataVolume disk with URL source example
#################################################
#- name: harddrive
#  type: disk
#  bus: virtio
#  bootorder: 2
#  readonly: false
#  pvsize: 32G
#  pvstorageClass: local-path
#  pvaccessMode: ReadWriteOnce
#  source: url
#  url: "https://cloud.debian.org/images/cloud/bookworm/daily/latest/debian-12-generic-amd64-daily.qcow2"

#########################################################
# Ephemeral disk example
# no persistance, these are deleted after the VM exists
# requires an existing PVC as a backing file
#########################################################
- name: harddrive
  type: disk
  bus: virtio
  bootorder: 2
  readonly: false
  pvc: debian12
  ephemeral: true

########################################################
# DataVolume disk with existing PVC source example
########################################################
#- name: harddrive
#  type: disk
#  bus: virtio
#  bootorder: 2
#  readonly: false
#  pvsize: 32G
#  pvstorageClass: local-path
#  pvaccessMode: ReadWriteOnce
#  source: pvc
#  pvcnamespace: default
#  pvcname: debian12

##########################################################
# ISO live-image example
##########################################################
#- name: iso
#  type: cdrom
#  bus: sata
#  bootorder: 1
#  readonly: true
#  pvsize: 8G
#  pvstorageClass: local-path
#  pvaccessMode: ReadWriteOnce
#  source: "https://www.itechtics.com/?dl_id=173"

##########################################################
# Empty PVC as disk example
##########################################################
#- name: harddrive
#  type: disk
#  bus: virtio
#  bootorder: 2
#  readonly: false
#  pvsize: 32G
#  pvstorageClass: local-path
#  pvaccessMode: ReadWriteOnce

##########################################################
# Container Disk Example
##########################################################
#- name: virtio-drivers
#  type: cdrom
#  bus: sata
#  bootorder: 3
#  readonly: true
#  image: "quay.io/kubevirt/virtio-container-disk:v1.0.0-rc.1-amd64"

###########################################################
# Local Disk example
# Not working, will have to open a ticket
# disks need to be owned by 107:messagebus
# disks cannot be mounted, file systems unidentifiable
###########################################################
#- name: localfile
#  type: hostDisk
#  # -- Enter a capacity amount to create a new disk
#  # otherwise expects an existing disk
#  capacity: 500G
#  path: /mnt/raid1/hdd2.img


# -- Service objects are used to expose the VM to the outside world.
  # Just like int he cloud each VM starts off isolated and will need
  # to be exposed via a LoadBalancer, NodePort, or ClusterIp service.

service:
#########################
# NodePort Example
- name: vm0-service
  type: NodePort
  externalTrafficPolicy: Cluster
  ports:
    - name: ssh
      port: 22
      targetPort: 22
      protocol: TCP
      nodePort: 30001
    - name: vnc
      port: 5900
      targetPort: 5900
      protocol: TCP
      nodePort: 30005
#########################
# LaodBalancer Example
#- name: vm0-lb
#  type: LoadBalancer
#  externalTrafficPolicy: Cluster
#  ports:
#    - name: vnc
#      port: 5900
#      targetPort: 5900
#      protocol: TCP

# -- Provide a path to an existing cloud-init file
# will be genrated from values below if no file specified
cloudinitPath:

# -- Values used to generate a cloud-init user-data file
# Not all modules yet supported
cloudinit:
  # -- Set hostname of VM
  hostname: scrapmetal
  disable_root: false
  network:
    config: disabled
  # -- provide a wireguard config
  wireguard: []
  # -- Create Groups
  groups:
    - docker
    - kvm
  # -- Create users
  users:
    - name: friend
      groups: users, admin, sudo
      sudo: ALL=(ALL) NOPASSWD:ALL
      shell: /bin/bash
      lock_passwd: false
      passwd: "$6$rounds=4096$saltsaltlettuce$Lp/FV.2oOgew7GbM6Nr8KMGMBn7iFM0x9ZwLqtx9Y4QJmKvfcnS.2zx4MKmymCPQGpHS7gqYOiqWjvdCIV2uN."
      # -- import ssh public-keys from github or lanchpad (doesnt work on Debian12)
      ssh_import_id: []
      # -- manually add a ssh public-key
      ssh_authorized_keys: []
  ca_certs: []
  # -- Commands to run early in boot process
  boot_cmd: []
  # -- base64 encode content of written files
  write_as_b64: false
  # -- list of files to embed in the user-data
  write_files:
    - apt-sources-list:
      # -- Destination to write file on boot
      path: /etc/apt/sources.list
      # -- Permissions to assign the file
      permissions: "0644"
      # -- path to the source file for helm to read
      content: apt-sources.list
  # -- Update apt package cache
  package_update: true
  # -- Perform apt package upgrade
  package_upgrade: false
  # -- apt packages to install
  packages: 
    - qemu-guest-agent
  # -- commands to run in final step
  runcmd: 
    - sudo systemctl start qemu-guest-agent
